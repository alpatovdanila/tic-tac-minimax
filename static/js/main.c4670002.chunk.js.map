{"version":3,"sources":["core/BoardState.js","interface/BoardCell.js","interface/BoardRow.js","interface/Board.js","interface/WinnerDeclaration.js","interface/DrawDeclaration.js","interface/ScoresCounter.js","Debug.js","Game.js","core/BoardSolver.js","interface/StoneX.js","interface/StoneO.js","core/StoneTypes.js","index.js"],"names":["BoardState","constructor","width","height","stones","prevState","this","Array","fill","validMoves","reduce","moves","stone","cell","push","hash","map","s","i","name","join","toJSON","next","partialState","Object","assign","clear","undefined","addStone","index","stoneInstance","BoardCell","_ref","children","rest","objectWithoutProperties","react_default","a","createElement","className","BoardRow","Board","state","onCellClick","terminal","concat","from","length","_","rowIndex","key","cellIndex","onClick","component","WinnerDeclaration","winner","onClose","enter","Fragment","DrawDeclaration","ScoresCounter","scores","_scores","slicedToArray","player","enemy","Debug","solver","style","color","position","top","left","padding","border","keys","minimaxCache","cache","JSON","stringify","blob","Blob","type","saveAs","winConditionCache","indexRight","boardState","fromIndex","indexLeft","indexBelow","Math","floor","indexBelowRight","below","indexBelowLeft","getSequence","forStoneType","inDirection","nextIndex","isWinCondition","stoneType","winLength","minimax","maximizingStone","minimizingStone","winCondition","depth","maximizing","_alpha","_beta","Infinity","memoized","score","random","inFogOfWar","alpha","beta","maxMove","minMove","_step","_iterator","createForOfIteratorHelper","n","done","move","value","child","result","max","min","err","e","f","Game","winSequenceLength","minimaxDepth","playerType","enemyType","debug","_useState","useState","_useState2","setState","_useState3","_useState4","setScores","_useState5","_useState6","thinking","setThinking","useMemo","draw","restartGame","newBoard","bestMove","StoneX","setEnter","useEffect","viewBox","xmlns","d","StoneO","OStone","XStone","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.c4670002.chunk.js","sourcesContent":["export class BoardState {\r\n  constructor({ width = 3, height = 3, stones }, prevState) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.stones = stones || new Array(width * height).fill(null);\r\n    this.prevState = prevState;\r\n    this.validMoves = this.stones.reduce((moves, stone, cell) => {\r\n      if (!stone) moves.push(cell);\r\n      return moves;\r\n    }, []);\r\n    this.hash = this.stones\r\n      .map((s, i) => {\r\n        let cell = !!s ? s.name : \"—\";\r\n        //if ((i + 1) % this.width === 0 && i !== 0) cell += \"\\n\";\r\n        return cell;\r\n      })\r\n      .join(\"\");\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      width: this.width,\r\n      height: this.height,\r\n      hash: this.hash,\r\n      prevState: this.prevState\r\n    };\r\n  }\r\n\r\n  next(partialState) {\r\n    return new this.constructor(\r\n      Object.assign(\r\n        {\r\n          width: this.width,\r\n          height: this.height,\r\n          stones: this.stones\r\n        },\r\n        partialState\r\n      ),\r\n      this\r\n    );\r\n  }\r\n\r\n  clear() {\r\n    return this.next({ stones: undefined }, null);\r\n  }\r\n\r\n  addStone(index, stoneInstance) {\r\n    const stones = [...this.stones];\r\n    stones[index] = stoneInstance;\r\n    return this.next({ stones });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport const BoardCell = ({ children, ...rest }) => (\r\n  <div className=\"board__cell\" {...rest}>\r\n    {children}\r\n  </div>\r\n);\r\n","import React from \"react\";\r\n\r\nexport const BoardRow = ({ children }) => (\r\n  <div className=\"board__row\">{children}</div>\r\n);\r\n","import React from \"react\";\r\nimport { BoardCell } from \"./BoardCell\";\r\nimport { BoardRow } from \"./BoardRow\";\r\n\r\nexport const Board = ({ state, onCellClick, terminal }) => {\r\n  const { width, height, stones } = state;\r\n\r\n  return (\r\n    <div className={`board ${terminal ? \" board_terminal\" : \"\"}`}>\r\n      {Array.from({ length: height }, (_, i) => i).map(rowIndex => (\r\n        <BoardRow key={rowIndex}>\r\n          {Array.from({ length: width }, (_, i) => i).map(cellIndex => (\r\n            <BoardCell\r\n              key={cellIndex}\r\n              onClick={() => onCellClick(rowIndex * width + cellIndex)}\r\n            >\r\n              {!!stones[rowIndex * width + cellIndex]\r\n                ? stones[rowIndex * width + cellIndex].component\r\n                : null}\r\n            </BoardCell>\r\n          ))}\r\n        </BoardRow>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useMemo } from \"react\";\r\n\r\n\r\nexport const WinnerDeclaration = ({ winner, onClose, enter }) => {\r\n  \r\n  //const lastWinner = winner === null ? lastWinner : winner;\r\n\r\n  return (\r\n    <div className={`alert ${enter ? \"alert_enter\" : \"\"}`} onClick={onClose}>\r\n      {winner && <>{winner.name} won!</>}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nexport const DrawDeclaration = ({ onClose, enter }) => {\r\n  return (\r\n    <div className={`alert ${enter ? \"alert_enter\" : \"\"}`} onClick={onClose}>\r\n      That's a draw!\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ScoresCounter = ({ scores }) => {\r\n  const [player, enemy] = scores;\r\n  return (\r\n    <div className={\"scores\"}>\r\n      {Array.from({ length: player }, (_, i) => i).map(i => (\r\n        <div className={\"scores__score scores__score_x\"} key={i}/>\r\n      ))}\r\n      {Array.from({ length: enemy }, (_, i) => i).map(i => (\r\n        <div className={\"scores__score scores__score_o\"}  key={i}/>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { saveAs } from \"file-saver\";\r\nexport const Debug = ({ solver }) => {\r\n  const download = () => {\r\n    const cache = JSON.stringify(solver.minimaxCache);\r\n    const blob = new Blob([cache], { type: \"text/plain;charset=utf-8\" });\r\n    saveAs(blob, \"minimax-cache.json\");\r\n  };\r\n  return (\r\n    <div\r\n      style={{\r\n        color: \"white\",\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        padding: \"25px\",\r\n        border: `1px solid red`\r\n      }}\r\n    >\r\n      minimax cache length: {Object.keys(solver.minimaxCache).length}\r\n      <br />\r\n      <button onClick={download}>Download minimax cache</button>\r\n    </div>\r\n  );\r\n};\r\n","import \"./styles.scss\";\r\nimport React, { useState, useMemo } from \"react\";\r\nimport { BoardState } from \"./core/BoardState\";\r\nimport { BoardStateSolver } from \"./core/BoardSolver\";\r\nimport { Board } from \"./interface/Board\";\r\nimport { WinnerDeclaration } from \"./interface/WinnerDeclaration\";\r\nimport { DrawDeclaration } from \"./interface/DrawDeclaration\";\r\nimport { ScoresCounter } from \"./interface/ScoresCounter\";\r\nimport { Debug } from \"./Debug\";\r\nconst solver = new BoardStateSolver();\r\n\r\nexport const Game = ({\r\n  width,\r\n  height,\r\n  winSequenceLength,\r\n  minimaxDepth,\r\n  playerType,\r\n  enemyType,\r\n  debug = false\r\n}) => {\r\n  const [state, setState] = useState(new BoardState({ width, height }));\r\n  const [scores, setScores] = useState([0, 0]);\r\n  const [thinking, setThinking] = useState(false);\r\n\r\n  const winner = useMemo(() => {\r\n    if (solver.isWinCondition(state, playerType, winSequenceLength))\r\n      return playerType;\r\n    if (solver.isWinCondition(state, enemyType, winSequenceLength))\r\n      return enemyType;\r\n    return null;\r\n  });\r\n\r\n  const draw = useMemo(() => !winner && state.validMoves.length === 0, [\r\n    winner,\r\n    state.validMoves.length\r\n  ]);\r\n\r\n  const terminal = useMemo(() => {\r\n    if (!!winner || !!draw) return true;\r\n    return false;\r\n  }, [winner, draw]);\r\n\r\n  const restartGame = () => {\r\n    if (winner === playerType) setScores([scores[0] + 1, scores[1]]);\r\n    if (winner === enemyType) setScores([scores[0], scores[1] + 1]);\r\n    setState(state.clear());\r\n  };\r\n\r\n  const gameCycle = index => {\r\n    if (!state.stones[index] && !terminal && !thinking) {\r\n      const newBoard = state.addStone(index, playerType);\r\n      setState(newBoard);\r\n      setThinking(true);\r\n      const bestMove = solver.minimax(\r\n        newBoard,\r\n        enemyType,\r\n        playerType,\r\n        winSequenceLength,\r\n        minimaxDepth\r\n      );\r\n\r\n      setState(newBoard.addStone(bestMove.cellIndex, enemyType));\r\n      setThinking(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {debug && <Debug solver={solver} />}\r\n      <ScoresCounter scores={scores} />\r\n      <Board state={state} onCellClick={gameCycle} terminal={terminal} />\r\n      <WinnerDeclaration winner={winner} onClose={restartGame} enter={winner} />\r\n      <DrawDeclaration onClose={restartGame} enter={draw} />\r\n    </>\r\n  );\r\n};\r\n","export class BoardStateSolver {\r\n  constructor() {\r\n    this.minimaxCache = {};\r\n    this.winConditionCache = {};\r\n  }\r\n\r\n  indexRight(boardState, fromIndex) {\r\n    const x = fromIndex % boardState.width;\r\n    if (x < boardState.width - 1) return fromIndex + 1;\r\n  }\r\n\r\n  indexLeft(boardState, fromIndex) {\r\n    const x = fromIndex % boardState.width;\r\n    if (x > 0) return fromIndex - 1;\r\n  }\r\n\r\n  indexBelow(boardState, fromIndex) {\r\n    const y = Math.floor(fromIndex / boardState.width);\r\n    if (y < boardState.height) return fromIndex + boardState.width;\r\n  }\r\n\r\n  indexBelowRight(boardState, fromIndex) {\r\n    const below = this.indexBelow(boardState, fromIndex);\r\n    if (below) return this.indexRight(boardState, below);\r\n  }\r\n\r\n  indexBelowLeft(boardState, fromIndex) {\r\n    const below = this.indexBelow(boardState, fromIndex);\r\n    if (below) return this.indexLeft(boardState, below);\r\n  }\r\n\r\n  getSequence(boardState, fromIndex, forStoneType, inDirection) {\r\n    const stone = boardState.stones[fromIndex];\r\n    if (!stone || stone !== forStoneType) return [];\r\n\r\n    const nextIndex = (from => {\r\n      if (inDirection === \"h\") return this.indexRight(boardState, from);\r\n      if (inDirection === \"v\") return this.indexBelow(boardState, from);\r\n      if (inDirection === \"dr\") return this.indexBelowRight(boardState, from);\r\n      if (inDirection === \"dl\") return this.indexBelowLeft(boardState, from);\r\n    })(fromIndex);\r\n\r\n    if (!nextIndex) return [fromIndex];\r\n\r\n    return [\r\n      fromIndex,\r\n      ...this.getSequence(boardState, nextIndex, forStoneType, inDirection)\r\n    ];\r\n  }\r\n\r\n  isWinCondition(state, stoneType, winLength) {\r\n    for (let i = 0; i < state.stones.length; i++) {\r\n      const stone = state.stones[i];\r\n      if (!stone || stone !== stoneType) continue;\r\n      if (\r\n        this.getSequence(state, i, stoneType, \"h\").length >= winLength ||\r\n        this.getSequence(state, i, stoneType, \"v\").length >= winLength ||\r\n        this.getSequence(state, i, stoneType, \"dr\").length >= winLength ||\r\n        this.getSequence(state, i, stoneType, \"dl\").length >= winLength\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  minimax(\r\n    boardState,\r\n    maximizingStone,\r\n    minimizingStone,\r\n    winCondition,\r\n    depth = 3,\r\n    maximizing = true,\r\n    _alpha = -Infinity,\r\n    _beta = Infinity\r\n  ) {\r\n    const memoized = this.minimaxCache[boardState.hash];\r\n    if (memoized) {\r\n      if (maximizing && memoized[0]) return memoized[0];\r\n      if (!maximizing && memoized[1]) return memoized[1];\r\n    }\r\n\r\n    if (this.isWinCondition(boardState, maximizingStone, winCondition))\r\n      return { score: 100 - depth + Math.random() };\r\n\r\n    if (this.isWinCondition(boardState, minimizingStone, winCondition))\r\n      return { score: -100 + depth - Math.random() };\r\n\r\n    if (boardState.validMoves.length === 0) {\r\n      return { score: 0 + Math.random() };\r\n    }\r\n    if (depth === 0) {\r\n      return { score: 0 + Math.random(), inFogOfWar: true };\r\n    }\r\n\r\n    let alpha = _alpha;\r\n    let beta = _beta;\r\n    let maxMove = { score: -Infinity, cellIndex: -1 };\r\n    let minMove = { score: Infinity, cellIndex: -1 };\r\n\r\n    for (let move of boardState.validMoves) {\r\n      const child = boardState.addStone(\r\n        move,\r\n        maximizing ? maximizingStone : minimizingStone\r\n      );\r\n\r\n      const result = this.minimax(\r\n        child,\r\n        maximizingStone,\r\n        minimizingStone,\r\n        winCondition,\r\n        depth - 1,\r\n        !maximizing,\r\n        alpha,\r\n        beta\r\n      );\r\n\r\n      if (result.score > maxMove.score)\r\n        maxMove = {\r\n          score: result.score,\r\n          cellIndex: move,\r\n          inFogOfWar: result.inFogOfWar\r\n        };\r\n      if (result.score < minMove.score)\r\n        minMove = {\r\n          score: result.score,\r\n          cellIndex: move,\r\n          inFogOfWar: result.inFogOfWar\r\n        };\r\n\r\n      if (maximizing) {\r\n        alpha = Math.max(alpha, maxMove.score);\r\n        if (beta <= alpha) break;\r\n      }\r\n\r\n      if (!maximizing) {\r\n        beta = Math.min(beta, minMove.score);\r\n        if (beta <= alpha) break;\r\n      }\r\n    }\r\n\r\n    if (!this.minimaxCache[boardState.hash])\r\n      this.minimaxCache[boardState.hash] = [];\r\n\r\n    if (!maxMove.inFogOfWar) this.minimaxCache[boardState.hash][0] = maxMove;\r\n    if (!minMove.inFogOfWar) this.minimaxCache[boardState.hash][1] = minMove;\r\n    return maximizing ? maxMove : minMove;\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport const StoneX = () => {\r\n  const [enter, setEnter] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setEnter(true);\r\n  }, []);\r\n\r\n  return (\r\n    <svg\r\n      width=\"72\"\r\n      height=\"72\"\r\n      viewBox=\"-4 -4 80 80\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      className={`stone stone_x ${enter ? \" stone_enter\" : \"\"}`}\r\n    >\r\n      <path d=\"M1.17157 69.0538C2.73367 70.6159 5.26633 70.6159 6.82843 69.0538L69.0538 6.82843C70.6159 5.26633 70.6159 2.73367 69.0538 1.17157C67.4917 -0.390522 64.9591 -0.390519 63.397 1.17158L1.17157 63.397C-0.390523 64.9591 -0.390523 67.4917 1.17157 69.0538ZM1.17157 6.82855C-0.390525 5.26645 -0.390525 2.73378 1.17157 1.17169C2.73367 -0.390407 5.26633 -0.390407 6.82843 1.17169L32.2842 26.6275L26.6274 32.2843L1.17157 6.82855ZM37.9411 43.598L43.5979 37.9412L69.0538 63.3971C70.6159 64.9592 70.6159 67.4918 69.0538 69.0539C67.4917 70.616 64.9591 70.616 63.397 69.0539L37.9411 43.598Z\" />\r\n    </svg>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport const StoneO = () => {\r\n  const [enter, setEnter] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setEnter(true);\r\n    return () => {\r\n      setEnter(false);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <svg\r\n      width=\"80\"\r\n      height=\"80\"\r\n      viewBox=\"0 0 80 80\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      className={`stone stone_o ${enter ? \" stone_enter\" : \"\"}`}\r\n    >\r\n      <path d=\"M40 0C62.0914 0 80 17.9086 80 40C80 57.5969 68.6371 72.5399 52.8484 77.8918C50.3893 78.7253 48 76.772 48 74.1756V74.1756C48 72.3017 49.2802 70.6913 51.0391 70.0449C63.2729 65.5485 72 53.7934 72 40C72 22.3269 57.6731 8 40 8C22.3269 8 8.00001 22.3269 8.00001 40C8.00001 53.7934 16.7271 65.5485 28.9609 70.0449C30.7198 70.6913 32 72.3017 32 74.1756V74.1756C32 76.772 29.6107 78.7254 27.1516 77.8918C11.3629 72.5399 -2.16192e-06 57.5969 0 40C0 17.9086 17.9086 -2.7141e-06 40 0Z\" />\r\n    </svg>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { StoneX as StoneComponentX } from \"../interface/StoneX\";\r\nimport { StoneO as StoneComponentO } from \"../interface/StoneO\";\r\n\r\nexport const OStone = {\r\n  component: <StoneComponentO />,\r\n  name: \"O\"\r\n};\r\n\r\nexport const XStone = {\r\n  component: <StoneComponentX />,\r\n  name: \"X\"\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Game } from \"./Game\";\nimport { XStone, OStone } from \"./core/StoneTypes\";\nimport \"./styles.scss\";\n\nconst rootElement = document.getElementById(\"game\");\nReactDOM.render(\n  <Game\n    width={3}\n    height={3}\n    winSequenceLength={3}\n    minimaxDepth={7}\n    playerType={OStone}\n    enemyType={XStone}\n  />,\n  rootElement\n);\n"],"sourceRoot":""}